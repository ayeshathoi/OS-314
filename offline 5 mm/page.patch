diff --git a/Makefile b/Makefile
index 39a99d7..bab286b 100644
--- a/Makefile
+++ b/Makefile
@@ -24,6 +24,7 @@ OBJS = \
   $K/sleeplock.o \
   $K/file.o \
   $K/pipe.o \
+  $K/swap.o \
   $K/exec.o \
   $K/sysfile.o \
   $K/kernelvec.o \
@@ -132,6 +133,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_pagetest\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/Page.patch b/Page.patch
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..0f7f01a 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,8 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct swap;
+struct pageList;
 
 // bio.c
 void            binit(void);
@@ -36,6 +38,8 @@ int             filewrite(struct file*, uint64, int n);
 
 // fs.c
 void            fsinit(int);
+uint            balloc(uint dev);
+void            bfree(int dev, uint b);
 int             dirlink(struct inode*, char*, uint);
 struct inode*   dirlookup(struct inode*, char*, uint*);
 struct inode*   ialloc(uint, short);
@@ -107,6 +111,13 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
 
+// swap.c
+void            swapinit(void);
+void            swapfree(struct swap*);
+struct swap*    swapalloc(void);
+void            swapout(struct swap *dst_sp, char *src_pa);
+void            swapin(char *dst_pa, struct swap *src_sp);
+
 // swtch.S
 void            swtch(struct context*, struct context*);
 
@@ -174,6 +185,7 @@ int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
 
+
 // plic.c
 void            plicinit(void);
 void            plicinithart(void);
@@ -187,3 +199,11 @@ void            virtio_disk_intr(void);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+
+// -----------------------------------------------
+void            pageinit(void);
+void            updateLivePage(pagetable_t, uint64, uint64);
+void            updatePageStat(uint,pagetable_t, uint64, uint64);
+void            updateNonLivePage(pagetable_t, uint64);
+uint64          swapInDisk(pte_t* pte);
+// -----------------------------------------------
\ No newline at end of file
diff --git a/kernel/exec.c b/kernel/exec.c
index e18bbb6..5afb261 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -80,7 +80,7 @@ exec(char *path, char **argv)
   // Use the second as the user stack.
   sz = PGROUNDUP(sz);
   uint64 sz1;
-  if((sz1 = uvmalloc(pagetable, sz, sz + 2*PGSIZE, PTE_W)) == 0)
+  if((sz1 = uvmalloc(pagetable, sz, sz + 2*PGSIZE, PTE_W | PTE_G)) == 0)
     goto bad;
   sz = sz1;
   uvmclear(pagetable, sz-2*PGSIZE);
diff --git a/kernel/fs.c b/kernel/fs.c
index c6bab15..2d9b419 100644
--- a/kernel/fs.c
+++ b/kernel/fs.c
@@ -62,7 +62,7 @@ bzero(int dev, int bno)
 
 // Allocate a zeroed disk block.
 // returns 0 if out of disk space.
-static uint
+uint
 balloc(uint dev)
 {
   int b, bi, m;
@@ -88,7 +88,7 @@ balloc(uint dev)
 }
 
 // Free a disk block.
-static void
+void
 bfree(int dev, uint b)
 {
   struct buf *bp;
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..596f9ad 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -344,6 +344,30 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
 
+/* included in swap out */
+//---------------------------------------------------
+//supervised bit -- swap bit
+#define PTE_S (1L << 8)
+//global bit
+#define PTE_G (1L << 9)
+//supervised read bit
+#define PTE_SR (1L << 10)
+//supervised write bit
+#define PTE_SW (1L << 11)
+//supervised phys addr bit
+#define PTE_PA (1L << 12)
+
+//read position bit
+#define PTE_R_POS 1L
+//write position bit
+#define PTE_W_POS 2L
+//supervised read position bit
+#define PTE_SR_POS 10L
+//supervised write position bit
+#define PTE_SW_POS 11L
+////supervised phys addr position bit
+#define PTE_PA_POS 12L
+//-------------------------------------------------
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
 
diff --git a/kernel/swap.c b/kernel/swap.c
new file mode 100644
index 0000000..f33bf40
--- /dev/null
+++ b/kernel/swap.c
@@ -0,0 +1,135 @@
+#include "types.h"
+#include "riscv.h"
+#include "fs.h"
+#include "spinlock.h"
+#include "defs.h"
+#include "param.h"
+#include "sleeplock.h"
+#include "buf.h"
+
+#define NBLOCKPERPAGE (PGSIZE / BSIZE)
+
+struct swap {
+  uint blocknos[NBLOCKPERPAGE];
+};
+
+struct run {
+  struct run *next;
+};
+
+struct {
+  struct spinlock lock;
+  struct run *freelist;
+} swapmem;
+
+// Initialize swapmem
+void
+swapinit(void)
+{
+  initlock(&swapmem.lock, "swapmem");
+  swapmem.freelist = 0;
+}
+
+// Allocate one swap struct.
+// Returns a pointer to the swap struct.
+// Returns 0 if the memory cannot be allocated.
+struct swap *
+swapalloc(void)
+{
+  struct run *r;
+  struct swap *s;
+
+  acquire(&swapmem.lock);
+  r = swapmem.freelist;
+  if(!r){
+    release(&swapmem.lock);
+    char *mem = kalloc();
+    char *mem_end = mem + PGSIZE;
+    for(; mem + sizeof(struct swap) <= mem_end; mem += sizeof(struct swap)){
+      r = (struct run*)mem;
+
+      acquire(&swapmem.lock);
+      r->next = swapmem.freelist;
+      swapmem.freelist = r;
+      release(&swapmem.lock);
+    }
+    acquire(&swapmem.lock);
+    r = swapmem.freelist;
+  }
+  swapmem.freelist = r->next;
+  release(&swapmem.lock);
+  
+  s = (struct swap*)r;
+  if(s)
+    memset((char*)s->blocknos, 0, sizeof(s->blocknos)); // fill with zeros
+  
+  return s;
+}
+
+// Free the swap struct pointed by s, and the blocks
+// contained in s, which normally should have been returned
+// by a call to swapalloc() and swapout().
+void
+swapfree(struct swap *s)
+{
+  uint *blockno;
+  struct run *r;
+
+  if(!s)
+    panic("swapfree");
+  
+  begin_op();
+  for(blockno = s->blocknos; blockno < &s->blocknos[NBLOCKPERPAGE]; blockno++){
+    if(*blockno)
+      bfree(ROOTDEV, *blockno);
+  }
+  end_op();
+
+  r = (struct run*)s;
+
+  acquire(&swapmem.lock);
+  r->next = swapmem.freelist;
+  swapmem.freelist = r;
+  release(&swapmem.lock);
+}
+
+// Swap out a given physical page src_pa to disk.
+// The metadata for retriving src_pa will be saved
+// to dst_pa which normally should have been returned
+// by a call to swapalloc().
+void
+swapout(struct swap *dst_sp, char *src_pa)
+{
+  uint *blockno;
+  struct buf *bp;
+  
+  begin_op();
+  for(blockno = dst_sp->blocknos; blockno < &dst_sp->blocknos[NBLOCKPERPAGE]; blockno++, src_pa += BSIZE){
+    *blockno = balloc(ROOTDEV);
+    if(*blockno == 0)
+      panic("swapout");
+    bp = bread(ROOTDEV, *blockno);
+    memmove(bp->data, src_pa, BSIZE);
+    log_write(bp);
+    brelse(bp);
+  }
+  end_op();
+}
+
+// Swap in a page into dst_pa from disk using src_sp.
+// src_sp should normally be updated with metadata
+// for retriving the page by a call to swapout().
+void
+swapin(char *dst_pa, struct swap *src_sp)
+{
+  uint *blockno;
+  struct buf *bp;
+  
+  if(!dst_pa)
+    panic("swapin");
+  for(blockno = src_sp->blocknos; blockno < &src_sp->blocknos[NBLOCKPERPAGE]; blockno++, dst_pa += BSIZE){
+    bp = bread(ROOTDEV, *blockno);
+    memmove(dst_pa, bp->data, BSIZE);
+    brelse(bp);
+  }
+}
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..692af84 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -50,7 +50,26 @@ usertrap(void)
   // save user program counter.
   p->trapframe->epc = r_sepc();
   
-  if(r_scause() == 8){
+  //------------------------------------------------
+  // read 13 or write page-fault 15
+  if(r_scause() == 13 || r_scause() == 15)
+  {
+    pte_t *pte;
+    uint64 va;
+    va = PGROUNDDOWN(r_stval());
+
+    if(va > p->sz || va == 0)
+      setkilled(p);
+    else
+    {
+      if((pte = walk(p->pagetable, va, 0)) == 0 || (*pte & PTE_S) == 0)
+        panic("usertrap");
+      updateLivePage(p->pagetable, swapInDisk(pte), va);
+    }
+  }
+  //------------------------------------------------
+  else if(r_scause() == 8)
+  {
     // system call
 
     if(killed(p))
@@ -66,6 +85,7 @@ usertrap(void)
 
     syscall();
   } else if((which_dev = devintr()) != 0){
+    printf("inside usertrap\n");
     // ok
   } else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
@@ -145,6 +165,7 @@ kerneltrap()
     panic("kerneltrap: interrupts enabled");
 
   if((which_dev = devintr()) == 0){
+    printf("inside kerneltrap\n");
     printf("scause %p\n", scause);
     printf("sepc=%p stval=%p\n", r_sepc(), r_stval());
     panic("kerneltrap");
@@ -189,6 +210,7 @@ devintr()
     if(irq == UART0_IRQ){
       uartintr();
     } else if(irq == VIRTIO0_IRQ){
+      // printf("here\n");
       virtio_disk_intr();
     } else if(irq){
       printf("unexpected interrupt irq=%d\n", irq);
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..ed09cd4 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -15,6 +15,128 @@ extern char etext[];  // kernel.ld sets this to end of kernel code.
 
 extern char trampoline[]; // trampoline.S
 
+//----------------------------------------------
+
+#define MAXPHYPAGES 20
+uint queue_first = 0;
+
+struct pageList {
+  pagetable_t pagetable;
+  uint64 pa, va;
+  int in_use;
+} pages_arr[MAXPHYPAGES];
+
+void
+pageinit(void)
+{
+  int i = 0;
+  while(i < MAXPHYPAGES)
+  {
+    pages_arr[i].in_use = 0;
+    i++;
+  }
+}
+
+void updatePageStat(uint i,pagetable_t pagetable, uint64 pa, uint64 va)
+{
+  pages_arr[i].pagetable = pagetable;
+  pages_arr[i].pa = pa;
+  pages_arr[i].va = va;
+  pages_arr[i].in_use = 1;
+}
+
+void
+updateLivePage(pagetable_t pagetable, uint64 pa, uint64 va)
+{
+  if(pages_arr[queue_first].in_use == 1)
+  {
+    pte_t* pte;
+    uint64 flags;
+    
+    struct swap *s = swapalloc();
+    swapout(s, (char*)pages_arr[queue_first].pa);
+    kfree((void*)pa);
+
+    /* update the corresponding pte for this newly swapped out page */
+    if((pte = walk(pages_arr[queue_first].pagetable, pages_arr[queue_first].va, 0)) == 0 || (*pte & PTE_V) == 0 )
+      panic("updateLivePage: pte should exist / updateLivePage: page not present");
+
+    flags = PTE_FLAGS(*pte);
+    *pte = flags;
+    *pte = *pte & ~(PTE_R);
+    *pte = *pte & ~(PTE_W);
+    *pte = *pte & ~(PTE_V);
+    *pte = *pte | PTE_S;
+    *pte = *pte | ((flags & PTE_R) << PTE_SR_POS) ;
+    *pte = *pte | ((flags & PTE_W) << PTE_SW_POS) ;
+    *pte = *pte | ((uint64)s << PTE_PA_POS);
+  }
+
+  printf("add initial head: %d\n", queue_first);
+
+  updatePageStat(queue_first,pagetable,pa,va);
+  queue_first++;
+
+  if(queue_first == MAXPHYPAGES)
+    queue_first = 0;
+  printf("add final head: %d\n", queue_first);
+}
+
+void
+updateNonLivePage(pagetable_t pagetable, uint64 va)
+{
+  int i = 0;
+
+  while(i < MAXPHYPAGES)
+  {
+    if(pagetable == pages_arr[i].pagetable && va == pages_arr[i].va)
+    {
+      printf("found\n");
+      break;
+    }
+    i++;
+  }
+  printf("remove initial head: %d\n", queue_first);
+  printf("index: %d\n", i);
+  while(i < MAXPHYPAGES-1)
+  {
+    if(pages_arr[i+1].in_use == 1)
+      updatePageStat(i,pages_arr[i+1].pagetable,pages_arr[i+1].pa,pages_arr[i+1].va);
+    else
+    {
+      pages_arr[i].in_use = 0;
+      queue_first = i;
+      break;
+    }
+    i++;
+  }
+  
+  if(i == MAXPHYPAGES-1)
+    queue_first = 0;
+  printf("remove final head: %d\n", queue_first);
+}
+
+uint64
+swapInDisk(pte_t* pte)
+{
+  struct swap *s = (struct swap*) ((*pte) >> PTE_PA_POS);
+  char* mem = kalloc();
+  swapin(mem, s);
+  swapfree(s);
+  uint64 pa = (uint64)mem;
+  
+   uint flags = PTE_FLAGS(*pte);
+  flags = flags &  ~(PTE_S); // setting swap flag as 0
+  flags = flags | ((flags & PTE_SR) << PTE_R_POS);
+  flags = flags |  ((flags & PTE_SW) << PTE_W_POS);
+  flags = flags |  PTE_V;
+  *pte  = flags | (pa << PTE_SR_POS);
+
+  return pa;
+}
+
+//------------------------------------------------------
+
 // Make a direct-map page table for the kernel.
 pagetable_t
 kvmmake(void)
@@ -170,23 +292,49 @@ mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
 void
 uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
 {
-  uint64 a;
+  struct swap *s;
+  uint64 a, pa;
   pte_t *pte;
+  uint flags;
 
   if((va % PGSIZE) != 0)
     panic("uvmunmap: not aligned");
 
-  for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
+  for(a = va; a < va + npages*PGSIZE; a += PGSIZE)
+  {
     if((pte = walk(pagetable, a, 0)) == 0)
       panic("uvmunmap: walk");
     if((*pte & PTE_V) == 0)
+    { 
+      if((*pte & PTE_S) == 0)
       panic("uvmunmap: not mapped");
-    if(PTE_FLAGS(*pte) == PTE_V)
+    }
+    if((flags = PTE_FLAGS(*pte)) == PTE_V)
       panic("uvmunmap: not a leaf");
-    if(do_free){
-      uint64 pa = PTE2PA(*pte);
-      kfree((void*)pa);
+    if(do_free)
+    {
+      if(flags & PTE_U)
+      {
+        if(!(flags & PTE_X))
+        {
+          if(!(flags & PTE_G))
+          {
+            if(flags & PTE_S)
+            {
+              s = (struct swap*) ((*pte) >> PTE_PA_POS);
+              swapfree(s);
+            }
+            else
+            {
+              updateNonLivePage(pagetable, a);
+              pa = PTE2PA(*pte);
+              kfree((void*)pa);
+            }
+          }
+        }
+      }
     }
+    
     *pte = 0;
   }
 }
@@ -225,8 +373,8 @@ uvmfirst(pagetable_t pagetable, uchar *src, uint sz)
 uint64
 uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
 {
-  char *mem;
-  uint64 a;
+  char *mem; // pa
+  uint64 a; // va
 
   if(newsz < oldsz)
     return oldsz;
@@ -244,6 +392,15 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
       uvmdealloc(pagetable, a, oldsz);
       return 0;
     }
+    
+    if(xperm & PTE_U)
+    {
+      if(!(xperm & PTE_X))
+      {
+        if(!(xperm & PTE_G))
+          updateLivePage(pagetable, (uint64)mem, a);
+      }
+    }
   }
   return newsz;
 }
@@ -309,13 +466,35 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   uint64 pa, i;
   uint flags;
   char *mem;
-
-  for(i = 0; i < sz; i += PGSIZE){
+  for(i = 0; i < sz; i += PGSIZE)
+  {
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
     if((*pte & PTE_V) == 0)
-      panic("uvmcopy: page not present");
-    pa = PTE2PA(*pte);
+    { 
+      if((*pte & PTE_S) == 0) // updated condition
+        panic("uvmcopy: page not present");
+    }
+    //------------------------------------------
+    if((*pte) & PTE_S) 
+    {
+      pa = swapInDisk(pte);
+      // check if user access on
+      if(((*pte) & PTE_U))
+      {
+        // check if it's executable
+        if(!((*pte) & PTE_X))
+        {
+          //check if global bit is on
+          if(!((*pte) & PTE_G))
+            updateLivePage(old, pa, i);
+        }
+      }
+    }
+    else
+      pa = PTE2PA(*pte);
+    //--------------------------------------------------------------
+
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
       goto err;
@@ -324,6 +503,17 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
       kfree(mem);
       goto err;
     }
+
+    if(((*pte) & PTE_U))
+    {
+      // check if it's executable
+      if(!((*pte) & PTE_X))
+      {
+        //check if global bit is on
+        if(!((*pte) & PTE_G))
+          updateLivePage(new, (uint64)mem, i);
+       }
+    }
   }
   return 0;
 
diff --git a/user/pagetest.c b/user/pagetest.c
new file mode 100644
index 0000000..268df7b
--- /dev/null
+++ b/user/pagetest.c
@@ -0,0 +1,17 @@
+#include "kernel/types.h"
+#include "kernel/riscv.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char *argv[]) {
+    char *mem[30];
+    for (int i = 0; i < 30; i++) {
+        mem[i] = sbrk(PGSIZE);
+        mem[i][0] = i;
+    }
+    for (int i = 0; i < 30; i++)
+        printf("%d\n", mem[i][0]);
+    for (int i = 0; i < 30; i++)
+        free((void *) mem);
+    return 0;
+}
\ No newline at end of file
